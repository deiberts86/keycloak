# Additional Pod annotations
podAnnotations: {}

# Pod Labels for Keycloak
podLabels: {}

command:
  - "/bin/bash"
  - "-c"

#
args:
  - '/opt/keycloak/bin/kc.sh build --features="fips" && /opt/keycloak/bin/kc.sh start --optimized'

#
proxy:
  enabled: true
  mode: xforwarded


extraEnv: |-
  - name: KC_HTTPS_KEY_STORE_PASSWORD
    value: "passwordpassword"
  - name: KC_HTTPS_KEY_STORE_TYPE
    value: "BCFKS"
  - name: KC_FIPS_MODE
    value: "strict"
  - name: KC_HOSTNAME
    value: "keycloak.example.com"
  - name: KC_CACHE_STACK
    value: "kubernetes"
  - name: KC_HOSTNAME_STRICT
    value: "false"
  - name: KC_HOSTNAME_DEBUG
    value: "true"
  - name: KC_HTTP_ENABLED
    value: "true"
  - name: KC_BOOTSTRAP_ADMIN_USERNAME
    value: "admin"
  - name: KC_BOOTSTRAP_ADMIN_PASSWORD
    value: "password1234567890!"
  - name: KEYCLOAK_PRODUCTION
    value: "true"
  - name: KC_HEALTH_ENABLED
    value: "true"
  - name: JAVA_OPTS_APPEND
    value: >-
      "-Djgroups.dns.query=keycloak-headless"
  - name: KC_LOG_LEVEL
    value: "org.keycloak.events:INFO,org.infinispan:INFO,org.jgroups:INFO"

replicas: 1

#
image:
  repository: harbor.example.com/keycloak/keycloak-ubi-fips
  tag: "26.0.7"
  pullPolicy: Always

imagePullSecrets: []
#- name: secret

#
updateStrategy: RollingUpdate

# SecurityContext for the Keycloak container
podSecurityContext:
  fsGroup: 2000
  runAsUser: 2000
  runAsGroup: 2000
  runAsNonRoot: true

securityContext:
  runAsUser: 2000
  runAsGroup: 2000
  runAsNonRoot: true
  capabilities:
    drop:
      - ALL
#
resources:
  requests:
    cpu: "500m"
    memory: "1Gi"
  limits:
    cpu: "1"
    memory: "1Gi"
#
## Network policy configuration
networkPolicy:
  # If true, the Network policies are deployed
  enabled: false

dbchecker:
  enabled: true
  image:
    # Docker image used to check Postgresql readiness at startup
    repository: registry1.dso.mil/ironbank/opensource/postgres/postgresql12
    # Image tag for the pgchecker image
    tag: "12.20"
    # Image pull policy for the dbchecker image
    pullPolicy: IfNotPresent
  # SecurityContext for the dbchecker container
  securityContext:
    allowPrivilegeEscalation: false
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
  # Resource requests and limits for the dbchecker container
  resources:
    requests:
      cpu: "250m"
      memory: "256Mi"
    limits:
      cpu: "250m"
      memory: "256Mi"

#
autoscaling:
  # If `true`, an autoscaling/v2beta2 HorizontalPodAutoscaler resource is created (requires Kubernetes 1.18 or above)
  # Autoscaling seems to be most reliable when using KUBE_PING service discovery (see README for details)
  # This disables the `replicas` field in the StatefulSet
  enabled: false
  # Additional HorizontalPodAutoscaler labels
  labels: {}
  # The minimum and maximum number of replicas for the Keycloak StatefulSet
  minReplicas: 3
  maxReplicas: 10
  # The metrics to use for scaling
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
  # The scaling policy to use. This will scale up quickly but only scale down a single Pod per 5 minutes.
  # This is important because caches are usually only replicated to 2 Pods and if one of those Pods is terminated this will give the cluster time to recover.
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300
#
postgresql:
  # If `true`, the Postgresql dependency is enabled
  enabled: true
  # PostgreSQL User to create
  postgresqlUsername: keycloak
  # PostgreSQL Password for the new user
  postgresqlPassword: keycloak
  # PostgreSQL Database to create
  postgresqlDatabase: keycloak
  # PostgreSQL network policy configuration
  networkPolicy:
    enabled: false
  # Added by BigBang
  # change bitnami sub-chart upstream image to pull from registry1.dso.mil
  # this image is only used for dev and CI pipelines
  global:
    imagePullSecrets:
      - registry1-secret
  image:
    registry: registry1.dso.mil
    repository: ironbank/opensource/postgres/postgresql12
    tag: 12.15
  securityContext:
    enabled: true
    fsGroup: 26
    runAsUser: 1001
    runAsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 26
    capabilities:
      drop:
        - ALL
#
secrets: {}

domain: example.com
istio:
  # Toggle istio integration
  enabled: false

#
ingress:
  # If `true`, an Ingress is created
  enabled: true
  # The name of the Ingress Class associated with this ingress
  ingressClassName: "nginx"
  # The Service port targeted by the Ingress
  servicePort: http
  # Ingress annotations
  annotations:
    cert-manager.io/cluster-issuer: kc-lab-clusterissuer
    nginx.ingress.kubernetes.io/use-forwarded-headers: 'true'
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'

  # Additional Ingress labels
  labels: {}
   # List of rules for the Ingress
  rules:
    -
      # Ingress host
      host: '{{ .Release.Name }}.example.com'
      # Paths for the host
      paths:
        - path: '{{ tpl .Values.http.relativePath $ | trimSuffix "/" }}/'
          pathType: Prefix
# Example TLS configuration
  tls:
    - hosts:
        - keycloak.example.com
      secretName: "kc-tls-cert"

  # ingress for console only (/auth/admin)
  console:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: kc-lab-clusterissuer
      nginx.ingress.kubernetes.io/use-forwarded-headers: 'true'
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'


    rules:
      -
        # Ingress host
        host: '{{ .Release.Name }}-console.example.com'
        # Paths for the host
        paths:
          - path: '{{ tpl .Values.http.relativePath $ | trimSuffix "/" }}/admin'
            pathType: Prefix

    # Console TLS configuration
    tls:
     - hosts:
         - '{{ .Release.Name }}-console.example.com'
       secretName: "kc-console-tls-cert"