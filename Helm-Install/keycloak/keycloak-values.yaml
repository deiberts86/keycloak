#
command:
  - "/opt/keycloak/bin/kc.sh"
args:
  - "start"
#
extraEnv: |-
  - name: KC_HOSTNAME
    value: "keycloak-keycloakx-http"
  - name: KC_HOSTNAME_STRICT
    value: "true"
  - name: KC_HOSTNAME_STRICT_HTTPS
    value: "true"
#   - name: KC_HTTPS_CERTIFICATE_FILE
#     value: /opt/keycloak/conf/tls.crt
#   - name: KC_HTTPS_CERTIFICATE_KEY_FILE
#     value: /opt/keycloak/conf/tls.key
#   - name: KC_HTTP_ENABLED
#     value: "true"
#   - name: KC_HTTP_RELATIVE_PATH
#     value: /auth
#   - name: KC_HTTPS_CLIENT_AUTH
#     value: request
#   - name: KC_PROXY
#     value: passthrough
#   - name: KC_HTTPS_TRUST_STORE_FILE
#     value: /opt/keycloak/conf/truststore.jks
#   - name: KC_HTTPS_TRUST_STORE_PASSWORD
#     value: password
#   - name: KC_LOG_LEVEL
#     value: "org.keycloak.events:DEBUG,org.infinispan:INFO,org.jgroups:INFO"
#   - name: KC_CACHE
#     value: ispn
#   - name: KC_CACHE_STACK
#     value: kubernetes
#   - name: KC_SPI_STICKY_SESSION_ENCODER_INFINISPAN_SHOULD_ATTACH_ROUTE
#     value: "false"
#
# Ignored if Autoscaler is used
replicas: 1
#
image:
  repository: registry1.dso.mil/ironbank/opensource/keycloak/keycloak
  tag: "21.1.1"
  pullPolicy: Always
#
test:
  # If `true`, test resources are created
  enabled: false
  image:
    repository: docker.io/seleniarm/standalone-chromium
    tag: "117.0"
    pullPolicy: IfNotPresent
  podSecurityContext:
    fsGroup: 1000
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
  deletionPolicy: before-hook-creation
#
imagePullSecrets:
- name: ironbank-secret
#
podSecurityContext:
  fsGroup: 1000
#
securityContext:
  runAsUser: 1000
  runAsNonRoot: true
  capabilities:
    drop:
      - ALL
#
livenessProbe: |
  httpGet:
    path: /auth/realms/master
    port: http
    scheme: HTTP
  failureThreshold: 15
  timeoutSeconds: 2
  periodSeconds: 15
# Readiness probe configuration
readinessProbe: |
  httpGet:
    path: /auth/realms/master
    port: http
    scheme: HTTP
  failureThreshold: 15
  timeoutSeconds: 2
# Startup probe configuration
startupProbe: |
  httpGet:
    path: /auth/realms/master
    port: http
  initialDelaySeconds: 90
  timeoutSeconds: 2
  failureThreshold: 60
  periodSeconds: 5
#
resources:
  requests:
    cpu: "500m"
    memory: "1Gi"
  limits:
    cpu: "1"
    memory: "1Gi"
#
statefulsetLabels:
  app: keycloak
#
secrets:
  env:
    stringData:
      # https://access.redhat.com/documentation/en-us/openjdk/11/html-single/configuring_openjdk_11_on_rhel_with_fips/index
      JAVA_TOOL_OPTIONS: "-Dcom.redhat.fips=false"
      # default admin credentials. Override them for production deployments
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "password"
      # java opts for jgroups required for infinispan distributed cache when using the kubernetes stack.
      # https://www.keycloak.org/server/caching
      JAVA_OPTS_APPEND: -Djgroups.dns.query={{ include "keycloak.fullname" . }}-headless

#
postgresql:
  # If `true`, the Postgresql dependency is enabled
  enabled: true
  # PostgreSQL User to create
  postgresqlUsername: keycloak
  # PostgreSQL Password for the new user
  postgresqlPassword: keycloak
  # PostgreSQL Database to create
  postgresqlDatabase: keycloak
  # PostgreSQL network policy configuration
  networkPolicy:
    enabled: false
  global:
    imagePullSecrets:
      - ironbank-secret
  image:
    registry: registry1.dso.mil
    repository: ironbank/opensource/postgres/postgresql12
    tag: 12.15
  securityContext:
    enabled: true
    fsGroup: 26
    runAsUser: 1001
    runAsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 26
    capabilities:
      drop:
        - ALL
#
ingress:
  enabled: true
  ingressClassName: "nginx"
  servicePort: http
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  labels: {}
  rules:
    - host: "keycloak.10-7-2-141.sslip.io"
      paths:
        - path: "/"
          pathType: Prefix
  tls:
    - hosts:
        - "keycloak.10-7-2-141.sslip.io"
      secretName: "keycloak-tls-secret"
  console:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    rules:
      - host: "keycloak-console.10-7-2-141.sslip.io"
        paths:
          - path: "/auth/admin"
            pathType: Prefix
    tls:
     - hosts:
         - keycloak-console.10-7-2-141.sslip.io
       secretName: "keycloak-console-tls-secret"
#
serviceMonitor:
  # If `true`, a ServiceMonitor resource for the prometheus-operator is created
  enabled: false
  # Optionally sets a target namespace in which to deploy the ServiceMonitor resource
  namespace: ""
  # Optionally sets a namespace for the ServiceMonitor
  namespaceSelector: {}
  # Annotations for the ServiceMonitor
  annotations: {}
  # Additional labels for the ServiceMonitor
  labels: {}
  # Interval at which Prometheus scrapes metrics
  interval: 10s
  # Timeout for scraping
  scrapeTimeout: 10s
  # The path at which metrics are served
  path: /metrics
  # The Service port at which metrics are served
  port: http
  # added by Big Bang to support Istio mTLS
  scheme: ""
  tlsConfig: {}
#
extraServiceMonitor:
  # If `true`, a ServiceMonitor resource for the prometheus-operator is created
  enabled: false
  # Optionally sets a target namespace in which to deploy the ServiceMonitor resource
  namespace: ""
  # Optionally sets a namespace for the ServiceMonitor
  namespaceSelector: {}
  # Annotations for the ServiceMonitor
  annotations: {}
  # Additional labels for the ServiceMonitor
  labels: {}
  # Interval at which Prometheus scrapes metrics
  interval: 10s
  # Timeout for scraping
  scrapeTimeout: 10s
  # The path at which metrics are served
  path: /auth/realms/master/metrics
  # The Service port at which metrics are served
  port: http
#
prometheusRule:
  # If `true`, a PrometheusRule resource for the prometheus-operator is created
  enabled: false
  # Annotations for the PrometheusRule
  annotations: {}
  # Additional labels for the PrometheusRule
  labels: {}
  # List of rules for Prometheus
  rules: []
  # - alert: keycloak-IngressHigh5xxRate
  #   annotations:
  #     message: The percentage of 5xx errors for keycloak over the last 5 minutes is over 1%.
  #   expr: |
  #     (
  #       sum(
  #         rate(
  #           nginx_ingress_controller_response_duration_seconds_count{exported_namespace="mynamespace",ingress="mynamespace-keycloak",status=~"5[0-9]{2}"}[1m]
  #         )
  #       )
  #       /
  #       sum(
  #         rate(
  #           nginx_ingress_controller_response_duration_seconds_count{exported_namespace="mynamespace",ingress="mynamespace-keycloak"}[1m]
  #         )
  #       )
  #     ) * 100 > 1
  #   for: 5m
  #   labels:
  #     severity: warning
#
autoscaling:
  enabled: false
  labels: {}
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300
# istio:
#   # Toggle istio integration
#   enabled: false
#   injection: "disabled"
#   mtls:
#     # -- STRICT = Allow only mutual TLS traffic,
#     # PERMISSIVE = Allow both plain text and mutual TLS traffic
#     mode: STRICT
#   keycloak:
#     # Toggle vs creation
#     enabled: false
#     annotations: {}
#     labels: {}
#     gateways:
#       - istio-system/main
#     hosts:
#       - keycloak.{{ .Values.domain }}
# monitoring:
#   enabled: false
# networkPolicies:
#   enabled: false
#   ingressLabels:
#     app: istio-ingressgateway
#     istio: ingressgateway
#   smtpPort: 587
#   ldap:
#     enabled: false
#     cidr: X.X.X.X/X
#     port: 636